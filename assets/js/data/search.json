[ { "title": "Android webviews the missing guide", "url": "/posts/android-webviews-the-missing-guide/", "categories": "android", "tags": "android, webview", "date": "2022-06-18 14:55:00 +0200", "snippet": "Mastering sending/receiving data to/from android web views. How we interact with them. A fully functional app inside ðŸŒŸ Source code inside ðŸ‘ŒMastering sending/receiving data to/from android web views. How we interact with them.We are busy developers I will not waste your time.If you want to do any of the following: Send data to some web app from Android. Receive data from some web app from Android.Then this article is for you.Sending Data to Web AppLetâ€™s say Iâ€™ve some web app I need to pass some data to it, for example: Calling JavaScript function Sending string or JSON objectOkay, so letâ€™s beginCreating a webviewI have the following XML layout&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\".HomeFragment\"&gt; &lt;WebView android:id=\"@+id/web_view\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:text=\"@string/home_fragment_label\" app:layout_constraintBottom_toTopOf=\"@+id/guideline\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /&gt; &lt;androidx.constraintlayout.widget.Guideline android:id=\"@+id/guideline\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:orientation=\"horizontal\" app:layout_constraintGuide_percent=\".65\" /&gt; &lt;TextView android:id=\"@+id/tvTitle\" style=\"@style/TextAppearance.AppCompat.Title\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:layout_marginStart=\"16dp\" android:layout_marginTop=\"24dp\" android:layout_marginEnd=\"16dp\" android:text=\"@string/we_can_send_data_to_the_web_app\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@+id/web_view\" /&gt; &lt;EditText android:id=\"@+id/etMessage\" android:layout_width=\"0dp\" android:layout_height=\"48dp\" android:layout_marginStart=\"16dp\" android:layout_marginTop=\"16dp\" android:layout_marginEnd=\"16dp\" android:autofillHints=\"name\" android:hint=\"@string/message_to_be_sent\" android:inputType=\"textAutoComplete\" android:textColorHint=\"#757575\" app:layout_constraintEnd_toStartOf=\"@+id/btnSend\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@+id/tvTitle\" /&gt; &lt;Button android:id=\"@+id/btnSend\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_marginEnd=\"16dp\" android:text=\"@string/send\" app:layout_constraintBottom_toBottomOf=\"@+id/etMessage\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintTop_toTopOf=\"@+id/etMessage\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;Also, donâ€™t forget to add the INTERNET permission &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;Letâ€™s enable Javascript on the webview and load my custom page ðŸ˜ƒ that Iâ€™m hosting on my GitHub account.binding.webview.apply {\tsettings.javaScriptEnabled = true loadUrl(\"https://abd3lraouf.github.io/webview_code_injection_from_android\")}Letâ€™s run the appInitial app versionCode injectionNow we are ready, letâ€™s begin code injectionLetâ€™s say I have a Javascript function as follows:function messageMe(message){ document.getElementById(\"demo\").innerHTML = message;}And of course, you can predict the DOM &lt;body&gt; &lt;h1&gt;Code injection&lt;/h1&gt; &lt;button&gt;Launch Native Code&lt;/button&gt; &lt;h2&gt; Messages from Android&lt;/h2&gt; &lt;p id=\"demo\"&gt;Can you replace me?&lt;/h2&gt; &lt;/body&gt;What we need to do is just execute the following JavaScript codemessageMe(\"Message\")Luckily, Android does give us a way to execute javascript code on any web app we open from a webview using the evaluateJavascript function from the WebView.So what we need to do is just call this function with a correctly parsed JavaScript code.evaluateJavascript(\"messageMe(\\\"$message\\\")\", null)Letâ€™s try it Now we are done. Letâ€™s go deeper with the next step, receiving data from a web app.Receiving Data from Web AppLetâ€™s say Iâ€™ve some web app that needs to deliver some data to the android side, such as the following: Sending a string Triggering some native code Navigating to another screen from the android sideTo implement such features we need to do the followingCreate a javascript interfaceA javascript interface is just a kotlin interface with one or more functions annotated with the @JavascriptInterface annotation, this function will be visible from the javascript side.Now Letâ€™s say I want to display a native toast message from the web app@JavascriptInterface@Suppress(\"unused\")fun toast(message: String) { Toast.makeText(context, message, Toast.LENGTH_LONG).show()}Also for javascript to call this function, it must be inside some object and letâ€™s call the toast function on the JsMediator object.Android = {}; Android.toast = function(message) { JsMediator.toast(message); }In the snippet above I create an empty object called Android then defined functions inside it with the name toast, this function takes a parameter message which calls it on another Object called JsMediator which is the ring that binds our javascript code to the kotlin code. JsMediator is the key Iâ€™ll bind the javascript interface on. woohoo.You may read the last paragraph again, I know itâ€™s difficult to wrap your head around it./*** called before start loading the page*/fun injectMediator(webView: WebView) { val code = \"Android = {}; Android.toast = function(message) { JsMediator.toast(message); }\" webView.evaluateJavascript(code, null)}Now, when shall we call this method?Binding the interfaceLike any other android view setup, we need it to be done after the view creation. So we will bind the interface in the onCreate in activities or the onViewCreated in fragments.This step is required for the javascript world to know that I have a method called toastbinding.webView.apply { settings.javaScriptEnabled = true setWebContentsDebuggingEnabled(true) JavaScriptShareInterface.bind(requireContext(), this) loadUrl(\"https://abd3lraouf.github.io/webview_code_injection_from_android\")}And the bind function attaches the interface on the key JsMediator/*** called at onCreate to initiate code injection*/fun bind(context: Context, webView: WebView) { webView.addJavascriptInterface(JavaScriptShareInterface(context), \"JsMediator\")}The final stepI want to intercept the page loading step and inject the mediator to forward the javascript calls for Android.toast(message) to the mediator, we defined aboveSo we will create a CustomWebViewClientobject CustomWebViewClient : WebViewClient() { override fun onPageStarted(view: WebView, url: String?, favicon: Bitmap?) { super.onPageStarted(view, url, favicon) JavaScriptShareInterface.injectMediator(view) }}This code will inject the mediator after the page is started loading.The final setup code for the web view will bebinding.webView.apply { settings.javaScriptEnabled = true setWebContentsDebuggingEnabled(true) JavaScriptShareInterface.bind(requireContext(), this) webViewClient = CustomWebViewClient loadUrl(\"https://abd3lraouf.github.io/webview_code_injection_from_android\")} Now we are not done yet.We are all good Android Citizens, we all should clear resources after usage, this part is easy, just bind the interface and unbind it in proper view lifecycle methods.Also, I applied some of the clean code principles to the code. All of that and more, I will leave this part for you to see for yourself.And thatâ€™s the moment, I have to end this article at. All the code I used for this tutorial is hosted at my GitHub account ðŸ¤—ðŸ¤—. Android app repository. Web App repository.ConclusionIn this article, I talked about how we can use web views for our benefit and how to interact with them.Please be aware that the Webview is a double-edged weapon, we must pay attention when we use them, or even execute javascript on them. Thatâ€™s where most vulnerabilities come from. Please be careful and Happy coding.Happy CodingAbdElraouf Sabri" } ]
